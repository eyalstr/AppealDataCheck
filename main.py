from concurrent.futures import ThreadPoolExecutor, as_completed
from apis.client_api import fetch_case_details
from apis.sql_client import fetch_appeal_number_by_case_id
from runners.requestlog_runner import run_request_log_comparison
from runners.discussion_runner import run_discussion_comparison
from runners.decision_runner import run_decision_comparison
from runners.document_runner import run_document_comparison
from runners.distribution_runner import run_distribution_comparison
from runners.case_representator_runner import run_representator_comparison
from runners.case_involved_runner import run_case_involved_comparison
from utils.logging_utils import log_and_print
from configs.config_loader import load_tab_config
from utils.sql_connection import get_sql_connection
from utils.fetcher import get_case_data
from dotenv import load_dotenv
from utils.json_parser import extract_decisions
import json
import os
import sys


def load_configuration():
    """
    Dynamically load the .env file, even from an executable context.
    """
    # Detect execution context
    if getattr(sys, 'frozen', False):
        base_dir = os.path.dirname(sys.executable)
    else:
        base_dir = os.path.dirname(os.path.abspath(__file__))

    env_path = os.path.join(base_dir, '.env')

    if os.path.exists(env_path):
        load_dotenv(env_path, override=True)
        log_and_print(f"✅ Loaded configuration from {env_path}")
    else:
        log_and_print(f"❌ Configuration file not found at {env_path}", "error")
        exit(1)

    required_env_vars = [
        "BEARER_TOKEN",
        "MOJ_APPLICATION_ID",
        "BASE_URL"
    ]

    for var in required_env_vars:
        if not os.getenv(var):
            log_and_print(f"❌ Missing required environment variable: {var}", "error")
            exit(1)


def process_case(case_id, tab_configs):
    conn = get_sql_connection()  # Each thread gets its own connection
    try:
        log_and_print(f"\n\n🔁 Processing case_id {case_id}...", "info")
        appeal_number = fetch_appeal_number_by_case_id(case_id, conn)
        # if not appeal_number:
        #     log_and_print(f"❌ Could not find appeal number for case ID {case_id}. Skipping.", "error")
        #     return case_id, {}

        case_results = {}
        
        case_json = get_case_data(case_id)
        #log_and_print(f"case_json={case_json}")               



        request_log_result = run_request_log_comparison(case_id, appeal_number, conn, tab_config=tab_configs["request_log"])
        if request_log_result:
            case_results["request_log"] = request_log_result["request_log"]

        discussion_result = run_discussion_comparison(case_id, appeal_number, conn, tab_config=tab_configs["discussion"])
        if discussion_result:
            case_results["discussion"] = discussion_result["discussion"]

        decision_result = run_decision_comparison(case_id, appeal_number, conn, tab_config=tab_configs["decision"])
        if decision_result:
            case_results["decision"] = decision_result["decision"]

        #document_result = run_document_comparison(case_id, appeal_number, conn, tab_config=tab_configs["document"])
        # if document_result:
        #     case_results["document"] = document_result["document"]

        representator_result = run_representator_comparison(case_id, appeal_number, conn, tab_config=tab_configs["representator_log"])
        representator_section = representator_result.get(str(case_id), {})
        if "representator_log" in representator_section:
            case_results["representator_log"] = representator_section["representator_log"]

        case_contact_result = run_case_involved_comparison(case_id, appeal_number, conn, tab_config=tab_configs["case_contact"])
        case_contact_section = case_contact_result.get(str(case_id), {})
        if "case_contact" in case_contact_section:
            case_results["case_contact"] = case_contact_section["case_contact"]

        # # inside your main flow (per case_id)

        
        distribution_result = run_distribution_comparison(case_id, appeal_number, conn,tab_config=tab_configs.get("distribution"))

        if distribution_result:
            case_results["distribution"] = distribution_result["distribution"]


        return case_id, case_results

    except Exception as e:
        log_and_print(f"❌ Unexpected error during case_id {case_id}: {e}", "error")
        return case_id, {}
    finally:
        conn.close()


def create_excel_summary_from_json(json_path="comparison_summary.json", excel_path="comparison_summary.xlsx"):
    import json
    import pandas as pd

    # Load the generated JSON results
    if not os.path.exists(json_path):
        log_and_print(f"❌ JSON file not found: {json_path}", "error")
        return

    with open(json_path, "r", encoding="utf-8") as f:
        comparison_data = json.load(f)

    summary_rows = []

    for case_id, tabs in comparison_data.items():
        case_summary = {
            "מספר תיק": case_id,
            "סטטוס כללי": "pass"
        }

        has_fail = False
        has_skip = False

        for tab, result in tabs.items():
            status = result.get("status_tab", "skip")
            case_summary[tab] = status

            if status == "fail":
                has_fail = True
            elif status == "skip":
                has_skip = True

        if has_fail:
            case_summary["סטטוס כללי"] = "fail"
        elif has_skip:
            case_summary["סטטוס כללי"] = "skip"

        summary_rows.append(case_summary)

    df = pd.DataFrame(summary_rows)

    # Summary counts
    pass_count = (df["סטטוס כללי"] == "pass").sum()
    fail_count = (df["סטטוס כללי"] == "fail").sum()
    skip_count = (df["סטטוס כללי"] == "skip").sum()

    summary_df = pd.DataFrame([
        {"Summary": "סה""כ תיקים", "Value": len(df)},
        {"Summary": "תיקים שעברו", "Value": pass_count},
        {"Summary": "תיקים שנכשלו", "Value": fail_count},
        {"Summary": "תיקים שלא נבדקו", "Value": skip_count}
    ])

    with pd.ExcelWriter(excel_path, engine="openpyxl") as writer:
        summary_df.to_excel(writer, sheet_name="Summary", index=False)
        df.to_excel(writer, sheet_name="Details", index=False)

    log_and_print(f"📁 Excel summary saved to: {excel_path}", "success")


def main():
    #load_configuration()
    #case_ids = [2005049,2004905,2005468]
    #20.5 תיקי הסבה סגורים + API
    case_ids = [2000001, 2000095, 2000138, 2000153, 2000154, 2000156, 2000160, 2000161, 2000162, 2000163, 2000164, 2000165, 2000166, 2000167, 2000168, 2000169, 2000171, 2000172, 2000173, 2000181, 2000184, 2000189, 2000190, 2000191, 2000192, 2000196, 2000198, 2000207, 2000208, 2000209, 2000210, 2000213, 2000215, 2000218, 2000222, 2000225, 2000228, 2000233, 2000234, 2000242, 2000243, 2000252, 2000254, 2000255, 2000258, 2000260, 2000261, 2000264, 2000265, 2000266, 2000267, 2000268, 2000269, 2000270, 2000271, 2000272, 2000273, 2000275, 2000276, 2000277, 2000279, 2000280, 2000283, 2000285, 2000286, 2000287, 2000560, 2000561, 2000562, 2000563, 2000564, 2000565, 2000640, 2000641, 2000651, 2000652, 2000673, 2000721, 2000759, 2000760, 2000768, 2000784, 2000786, 2000787, 2000788, 2000789, 2000790, 2000791, 2000792, 2000805, 2000834, 2000835, 2000874, 2000875, 2000876, 2000879, 2000880, 2000885, 2000898, 2000899, 2000900, 2000901, 2000902, 2000903, 2000906, 2000908, 2000909, 2000913, 2000919, 2000920, 2000927, 2000930, 2000931, 2000932, 2000933, 2000934, 2000936, 2000937, 2000938, 2000939, 2000945, 2000946, 2000947, 2000948, 2000972, 2000973, 2000980, 2000981, 2000982, 2000983, 2000986, 2000987, 2000989, 2000991, 2000992, 2000998, 2000999, 2001000, 2001001, 2001003, 2001004, 2001005, 2001006, 2001007, 2001011, 2001012, 2001014, 2001017, 2001018, 2001020, 2001022, 2001031, 2001032, 2001033, 2001034, 2001035, 2001036, 2001039, 2001040, 2001041, 2001042, 2001044, 2001046, 2001049, 2001053, 2001054, 2001055, 2001056, 2001057, 2001059, 2001066, 2001067, 2001068, 2001069, 2001070, 2001073, 2001074, 2001075, 2001076, 2001077, 2001078, 2001079, 2001081, 2001082, 2001083, 2001084, 2001085, 2001088, 2001090, 2001091, 2001093, 2001094, 2001095, 2001096, 2001097, 2001099, 2001100, 2001101, 2001102, 2001103, 2001104, 2001105, 2001106, 2001107, 2001108, 2001112, 2001113, 2001114, 2001115, 2001118, 2001119, 2001120, 2001121, 2001122, 2001123, 2001127, 2001128, 2001129, 2001132, 2001133, 2001134, 2001135, 2001136, 2001137, 2001138, 2001139, 2001141, 2001142, 2001143, 2001144, 2001145, 2001146, 2001147, 2001149, 2001150, 2001151, 2001152, 2001153, 2001154, 2001155, 2001157, 2001158, 2001159, 2001161, 2001164, 2001165, 2001166, 2001167, 2001169, 2001170, 2001174, 2001182, 2001184, 2001185, 2001186, 2001187, 2001188, 2001189, 2001190, 2001192, 2001194, 2001195, 2001196, 2001201, 2001202, 2001204, 2001205, 2001208, 2001212, 2001213, 2001214, 2001220, 2001221, 2001223, 2001224, 2001226, 2001232, 2001233, 2001237, 2001243, 2001245, 2001246, 2001247, 2001249, 2001250, 2001253, 2001254, 2001255, 2001256, 2001257, 2001258, 2001259, 2001263, 2001267, 2001268, 2001269, 2001270, 2001271, 2001272, 2001273, 2001274, 2001275, 2001276, 2001277, 2001278, 2001279, 2001280, 2001281, 2001282, 2001283, 2001287, 2001288, 2001289, 2001290, 2001291, 2001293, 2001294, 2001295, 2001298, 2001543, 2001544, 2001545, 2001546, 2001547, 2001548, 2001549, 2001787, 2001811, 2001818, 2001819, 2001820, 2001828, 2001829, 2001830, 2001831, 2001832, 2001833, 2001834, 2001840, 2001859, 2001860, 2001862, 2001864, 2001865, 2001866, 2001867, 2001868, 2001870, 2001871, 2001874, 2001875, 2001876, 2001877, 2001878, 2001879, 2001880, 2001882, 2001883, 2001884, 2001885, 2001886, 2001887, 2001888, 2001889, 2001890, 2001892, 2001893, 2001894, 2001895, 2001897, 2001899, 2001900, 2001901, 2001902, 2001904, 2001905, 2001906, 2001907, 2001908, 2001909, 2001911, 2001912, 2001913, 2001914, 2001915, 2001916, 2001917, 2001918, 2001919, 2001920, 2001921, 2001922, 2001923, 2001924, 2001925, 2001926, 2001927, 2001928, 2001929, 2001930, 2001931, 2001932, 2001933, 2001934, 2001935, 2001936, 2001937, 2001938, 2001939, 2001940, 2001941, 2001942, 2001943, 2001944, 2001945, 2001946, 2001947, 2001949, 2001950, 2001953, 2001955, 2001956, 2001957, 2001961, 2001962, 2001965, 2001967, 2001971, 2001980, 2001981, 2001983, 2001984, 2001985, 2001986, 2001987, 2001988, 2001989, 2001992, 2001993, 2001994, 2001995, 2001996, 2001997, 2001998, 2001999, 2002000, 2002005, 2002010, 2002011, 2002012]
    #, 2002014, 2002015, 2002170, 2002171, 2002193, 2002202, 2002203, 2002204, 2002232, 2002246, 2002277, 2002278, 2002283, 2002314, 2002315, 2002316, 2002323, 2002331, 2002332, 2002333, 2002334, 2002335, 2002338, 2002340, 2002345, 2002347, 2002348, 2002349, 2002350, 2002351, 2002353, 2002357, 2002364, 2002365, 2002366, 2002374, 2002375, 2002377, 2002379, 2002380, 2002381, 2002382, 2002390, 2002391, 2002416, 2002420, 2002496, 2002497, 2002498, 2002534, 2002539, 2002540, 2002541, 2002550, 2002551, 2002561, 2002563, 2002575, 2002582, 2002583, 2002585, 2002586, 2002587, 2002590, 2002592, 2002595, 2002596, 2002597, 2002598, 2002599, 2002600, 2002601, 2002602, 2002603, 2002604, 2002605, 2002606, 2002607, 2002608, 2002609, 2002610, 2002611, 2002612, 2002613, 2002614, 2002615, 2002616, 2002617, 2002618, 2002619, 2002620, 2002621, 2002624, 2002625, 2002626, 2002627, 2002629, 2002632, 2002633, 2002634, 2002635, 2002639, 2002640, 2002645, 2002662, 2002663, 2002686, 2002982, 2003026, 2003027, 2003028, 2003086, 2003087, 2003088, 2003105, 2003137, 2003151, 2003152, 2003153, 2003159, 2003168, 2003170, 2003171, 2003172, 2003173, 2003174, 2003175, 2003176, 2003177, 2003179, 2003183, 2003184, 2003185, 2003186, 2003187, 2003188, 2003189, 2003194, 2003195, 2003196, 2003203, 2003204, 2003205, 2003206, 2003207, 2003208, 2003209, 2003212, 2003214, 2003215, 2003216, 2003218, 2003219, 2003220, 2003221, 2003222, 2003224, 2003226, 2003227, 2003228, 2003229, 2003230, 2003231, 2003232, 2003233, 2003234, 2003235, 2003236, 2003246, 2003247, 2003248, 2003249, 2003250, 2003252, 2003253, 2003259, 2003262, 2003263, 2003264, 2003265, 2003267, 2003268, 2003269, 2003270, 2003271, 2003272, 2003273, 2003274, 2003281, 2003283, 2003284, 2003285, 2003286, 2003287, 2003288, 2003289, 2003290, 2003292, 2003297, 2003300, 2003301, 2003316, 2003317, 2003318, 2003319, 2003320, 2003321, 2003322, 2003323, 2003324, 2003326, 2003331, 2003333, 2003334, 2003335, 2003336, 2003355, 2003356, 2003358, 2003363, 2003377, 2003378, 2003380, 2003381, 2003393, 2003394, 2003395, 2003396, 2003397, 2003420, 2003623, 2003650, 2003680, 2003687, 2003695, 2003697, 2003699, 2003714, 2003715, 2003717, 2003719, 2003724, 2003727, 2003730, 2003731, 2003732, 2003733, 2003734, 2003735, 2003736, 2003737, 2003738, 2003739, 2003740, 2003741, 2003742, 2003743, 2003744, 2003745, 2003746, 2003747, 2003748, 2003749, 2003750, 2003751, 2003752, 2003753, 2003754, 2003755, 2003756, 2003757, 2003758, 2003759, 2003760, 2003761, 2003762, 2003763, 2003764, 2003765, 2003766, 2003767, 2003768, 2003769, 2003770, 2003771, 2003772, 2003773, 2003774, 2003775, 2003776, 2003777, 2003778, 2003779, 2003780, 2003781, 2003782, 2003783, 2003784, 2003785, 2003786, 2003787, 2003789, 2003790, 2003791, 2003792, 2003793, 2003796, 2003799, 2003807, 2003810, 2003811, 2003812, 2003813, 2003816, 2003817, 2003825, 2003826, 2003827, 2003828, 2003829, 2003830, 2003835, 2003836, 2003837, 2003838, 2003839, 2003841, 2003842, 2003843, 2003911, 2003916, 2003917, 2004178, 2004200, 2004201, 2004202, 2004203, 2004210, 2004211, 2004213, 2004214, 2004226, 2004237, 2004242, 2004243, 2004244, 2004245, 2004246, 2004248, 2004249, 2004250, 2004251, 2004252, 2004253, 2004254, 2004255, 2004258, 2004260, 2004261, 2004262, 2004263, 2004264, 2004265, 2004266, 2004267, 2004268, 2004269, 2004270, 2004271, 2004272, 2004275, 2004276, 2004277, 2004278, 2004283, 2004284, 2004285, 2004286, 2004287, 2004288, 2004289, 2004290, 2004291, 2004292, 2004293, 2004294, 2004295, 2004296, 2004297, 2004298, 2004299, 2004300, 2004301, 2004302, 2004304, 2004306, 2004307, 2004308, 2004309, 2004310, 2004311, 2004312, 2004313, 2004314, 2004315, 2004316, 2004322, 2004324, 2004325, 2004326, 2004327, 2004328, 2004329, 2004330, 2004331, 2004332, 2004333, 2004334, 2004349, 2004353, 2004354, 2004355, 2004358, 2004359, 2004360, 2004361, 2004362, 2004363, 2004365, 2004369, 2004371, 2004374, 2004379, 2004381, 2004382, 2004383, 2004385, 2004386, 2004387, 2004388, 2004396, 2004404, 2004409, 2004411, 2004417, 2004431, 2004432, 2004457, 2004469, 2004476, 2004477, 2004481, 2004483, 2004485, 2004487, 2004498, 2004501, 2004516, 2004523, 2004586, 2004653, 2004667, 2004668, 2004675, 2004676, 2004681, 2004688, 2004730, 2004733, 2004749, 2004750, 2004751, 2004752, 2004753, 2004754, 2004755, 2004756, 2004775, 2004804, 2004805, 2004811, 2004826, 2004833, 2004859, 2004869, 2004875, 2004890, 2004892, 2004895, 2004906, 2004908, 2004914, 2004926, 2004931, 2004935, 2004936, 2004937, 2004957, 2004965, 2004976, 2004986, 2004987, 2004989, 2004991, 2004992, 2005000, 2005002, 2005003, 2005012, 2005015, 2005017, 2005024, 2005027, 2005031, 2005035, 2005041, 2005053, 2005054, 2005065, 2005068, 2005076, 2005093, 2005094, 2005095, 2005096, 2005097, 2005111, 2005112, 2005127, 2005140, 2005141, 2005145, 2005146, 2005147, 2005167, 2005170, 2005180, 2005194, 2005255, 2005268, 2005297, 2005316, 2005322, 2005349, 2005350, 2005374, 2005375, 2005380, 2005420, 2005450]

    #20.5 תיקי הסבה פעילים + API
    # case_ids = [
    #         2005468, 2005510, 2005515, 2005516, 2005078, 2005224, 2005050, 2005203, 2005217, 2005183,
    #         2005109, 2005154, 2005049, 2005200, 2005114, 2005113, 2005199, 2005177, 2004893, 2005013,
    #         2005309, 2005311, 2005313, 2005389, 2005385, 2005309, 2005062, 2005071, 2005088, 2005090,
    #         2005102, 2005060, 2005239, 2005187, 2005091, 2005072, 2005073, 2005151, 2005234, 2005310,
    #         2005339, 2000741, 2005235, 2005344, 2005281, 2005246, 2005074, 2005075, 2005163, 2005195,
    #         2004968, 2004964, 2004905, 2005130, 2005131, 2004814, 2004956, 2004928, 2004907, 2005132,
    #         2005119, 2004433, 2004693, 2005208, 2005048, 2005009, 2004858, 2004877, 2005089, 2004758,
    #         2004851, 2004894, 2004960, 2004961, 2005006, 2005007, 2005052, 2005074, 2005075, 2005120,
    #         2005122, 2005125, 2005128, 2005129, 2005137, 2005148, 2005149, 2005165, 2005191, 2005196,
    #         2005197, 2005198, 2005199, 2005200, 2005203, 2005218, 2005220, 2005225, 2005229, 2005230,
    #         2005231, 2005236, 2005237, 2005241, 2005242, 2005253, 2005269, 2005270, 2005272, 2005277,
    #         2005282, 2005287, 2005288, 2005299, 2005304, 2005305, 2005307, 2005312, 2005314, 2005315,
    #         2005317, 2005319, 2005320, 2005323, 2005324, 2005325, 2005326, 2005328, 2005331, 2005334,
    #         2005336, 2005338, 2005340, 2005342, 2005346, 2005347, 2005348, 2005351, 2005352, 2005357,
    #         2005358, 2005360, 2005363, 2005365, 2005367, 2005368, 2005369, 2005370, 2005371, 2005373,
    #         2005377, 2005378, 2005382, 2005386, 2005388, 2005390, 2005391, 2004433, 2005289, 2005295,
    #         2005466, 2005467, 2005469, 2005470, 2005473, 2005474, 2005475, 2005476, 2005477, 2005480,
    #         2005481, 2005482, 2005483, 2005484, 2005485, 2005486, 2005487, 2005488, 2005489, 2005490,
    #         2005491, 2005492, 2005493, 2005494, 2005495, 2005496, 2005497, 2005498, 2005499, 2005500,
    #         2005501, 2005502, 2005503, 2005504, 2005505, 2005507, 2005508, 2005509, 2005392, 2005396,
    #         2005397, 2005399, 2005401, 2005402, 2005403, 2005404, 2005405, 2005407, 2005408, 2005409,
    #         2005410, 2005411, 2005412, 2005415, 2005417, 2005418, 2005421, 2005422, 2005424, 2005425,
    #         2005427, 2005429, 2005430, 2005431, 2005434, 2005435, 2005436, 2005437, 2005438, 2005439,
    #         2005442, 2005447, 2005448, 2005451, 2005452, 2005454, 2005460, 2005461, 2005462, 2005463,
    #         2005464, 2005465, 2005506, 2004338, 2004339, 2004974, 2005085, 2005219, 2005264, 2005291,
    #         2005329, 2005330, 2005343, 2005355, 2005155, 2005296, 2005376, 2005393, 2005458, 2005459,
    #         2005276, 2005366, 2005453, 2005060, 2005228, 2005395, 2005294, 2005161, 2005160, 2005159,
    #         2004762, 2001968, 2005381, 2005379, 2005372, 2005359, 2005332, 2005280, 2005279, 2005275,
    #         2005247, 2005226, 2005217, 2005216, 2005205, 2005188, 2005102, 2005067, 2005042, 2004996,
    #         2004995, 2004975, 2004759, 2005078, 2005184, 2005394, 2005400, 2005479, 2005511, 2005512,
    #         2005514
    #     ]


    # # 13.5 - appeals
    #case_ids = [2004877]#, 2005042, 2005055, 2005058, 2005006]
    # case_ids = [
    #     2005393, 2005459, 2005042, 2005055, 2005058, 2005006, 2005078, 2005119, 2005224, 2005050,
    #     2005036, 2004951, 2004968, 2005203, 2005249, 2005250, 2005259, 2005261, 2005262, 2005217,
    #     2005183, 2005104, 2005195, 2005109, 2005132, 2005154, 2004880, 2004881, 2005110, 2005049,
    #     2001968, 2004907, 2005073, 2005072, 2005170, 2005200, 2000741, 2005114, 2005113, 2005234,
    #     2005199, 2004928, 2005177, 2005015, 2005061, 2004893, 2004956, 2005013, 2004814, 2005309,
    #     2005311, 2005313, 2005389, 2005385, 2005309, 2005062, 2005071, 2005088, 2005090, 2005102,
    #     2005208, 2005214, 2004433, 2004964, 2005060, 2005020, 2005019, 2005131, 2005130, 2005239,
    #     2005187, 2004889, 2004905, 2005091, 2005290, 2004693, 2005048, 2005054, 2005009, 2004858,
    #     2004877, 2005089, 2005166, 2005287, 2005288, 2005289, 2005295, 2005296, 2005299, 2005304,
    #     2005305, 2005307, 2005308, 2005312, 2005314, 2005315, 2005317, 2005319, 2005320, 2005323,
    #     2005324, 2005326, 2005328, 2005331, 2005334, 2005335, 2005336, 2005338, 2005339, 2005340,
    #     2005342, 2005343, 2005344, 2005346, 2005347, 2005348, 2005351, 2005352, 2005354, 2005356,
    #     2005357, 2005358, 2005360, 2005282, 2005361, 2005363, 2005365, 2005366, 2005367, 2005368,
    #     2005369, 2005370, 2005371, 2005373, 2005378, 2005382, 2005386, 2005388, 2005390, 2005391,
    #     2005392, 2005394, 2005396, 2005397, 2005399, 2005401, 2005402, 2005403, 2005404, 2005405,
    #     2005407, 2005408, 2005409, 2005410, 2005411, 2005412, 2005415, 2005417, 2005418, 2005421,
    #     2005422, 2005424, 2005425, 2005427, 2005428, 2005429, 2005430, 2005431, 2005434, 2005436,
    #     2005437, 2005438, 2005439, 2005440, 2005442, 2005447, 2005448, 2005451, 2005456, 2005457,
    #     2005460, 2005461, 2005462, 2005463, 2005464, 2005465, 2005466, 2005467, 2005469, 2005470,
    #     2005473, 2005474, 2005475, 2005476, 2005477, 2004894, 2004960, 2004961, 2005007, 2005074,
    #     2005075, 2005113, 2005114, 2005122, 2005125, 2005128, 2005129, 2005137, 2005148, 2005149,
    #     2005155, 2005158, 2005163, 2005165, 2005191, 2005196, 2005199, 2005200, 2005203, 2005218,
    #     2005220, 2005225, 2005228, 2005229, 2005230, 2005235, 2005241, 2005242, 2005244, 2005245,
    #     2005251, 2005253, 2005257, 2005258, 2005264, 2005269, 2005270, 2005272, 2005277, 2005226,
    #     2005249, 2005250, 2005279, 2005332, 2005372, 2005400, 2005443, 2004974, 2005015, 2005219,
    #     2005291, 2005294, 2005329, 2005330, 2005355, 2005170, 2005179, 2005234, 2005284, 2005376,
    #     2005377, 2005455, 2005458, 2005151, 2005398, 2005453, 2004991, 2004992, 2005060, 2005157,
    #     2005306, 2005395, 2005145, 2005073, 2005072, 2005069, 2005061, 2005161, 2005160, 2005159,
    #     2005085, 2005079, 2004762, 2001968, 2004339, 2004338, 2005217, 2005216, 2005198, 2005197,
    #     2005188, 2005014, 2004975, 2005078, 2005259, 2005261, 2005262, 2005478, 2005479, 2005471,
    #     2005472
    #     ]
    
    
    # case_ids = [2004759, 2005285, 2005281, 2005287, 2004338, 2004339, 2001968, 2004759, 2004761, 2004762,
    #             2004771, 2004804, 2004805, 2004854, 2004860, 2004891, 2004892, 2004893, 2004905, 2004907]
    
    # case_ids = [2004759, 2005285, 2005281, 2005287, 2004338, 2004339, 2001968, 2004759, 2004761, 2004762,
    #             2004771, 2004804, 2004805, 2004854, 2004860, 2004891, 2004892, 2004893, 2004905, 2004907,
    #             2004916, 2004917, 2004928, 2004951, 2004952, 2004956, 2004964, 2004968, 2004970, 2004971,
    #             2004974, 2004984, 2004995, 2004996, 2004999, 2005006, 2005007, 2005011, 2005013, 2005019,
    #             2005020, 2005031, 2005036, 2005040, 2005045, 2005048, 2005055, 2004693, 2004930, 2004943,
    #             2004944, 2005111, 2005112, 2004361, 2004807, 2004969, 2005288, 2005289, 2005056, 2005058,
    #             2005060, 2005061, 2005063, 2005067, 2005068, 2005070, 2005071, 2005074, 2005075, 2005077,
    #             2005078, 2005091, 2005094, 2005102, 2005104, 2005106, 2005109, 2005117, 2005119, 2005122,
    #             2005125, 2005128, 2005129, 2005130, 2005131, 2005132, 2005134, 2005135, 2005137, 2005145,
    #             2005146, 2005147, 2005151, 2005152, 2005154, 2005155, 2005158, 2005159, 2005160, 2005161,
    #             2005162, 2005164, 2005263, 2005284, 2005166, 2005167, 2005168, 2005169, 2005170, 2005176,
    #             2005177, 2005178, 2005179, 2005183, 2005184, 2005186, 2005187, 2005188, 2005195, 2005196,
    #             2005197, 2005198, 2005199, 2005200, 2005202, 2005203, 2005207, 2005208, 2005214, 2005216,
    #             2005217, 2005219, 2005220, 2005221, 2005224, 2005226, 2005227, 2005228, 2005229, 2005231,
    #             2005232, 2005233, 2005234, 2005235, 2005239, 2005242, 2005244, 2005245, 2004758, 2004975,
    #             2004982, 2005025, 2005062, 2005088, 2005090, 2005120, 2005201, 2005262, 2000741, 2004814,
    #             2005015, 2005049, 2005052, 2005079, 2005085, 2005087, 2005110, 2005181, 2005182, 2005014,
    #             2005053, 2005054, 2005194, 2005222, 2005252, 2004856, 2004887, 2004894, 2004909, 2005059,
    #             2005072, 2005073, 2005173, 2005191, 2005218, 2005269, 2004855, 2005127, 2004866, 2004877,
    #             2004927, 2004960, 2004961, 2004991, 2004992, 2005089, 2005148, 2005149, 2005163, 2005180,
    #             2005241, 2005246, 2005247, 2005248, 2005249, 2005250, 2005251, 2005253, 2005256, 2005257,
    #             2005258, 2005259, 2005261, 2005264, 2005268, 2005271, 2005272, 2005273, 2005274, 2005275,
    #             2005276, 2005277, 2005278, 2005279, 2005280, 2005282, 2004758, 2004759, 2004854, 2004930,
    #             2004980, 2005003, 2005011, 2005025, 2005029, 2005042, 2005055, 2005058, 2005071, 2005088,
    #             2005090, 2004674, 2004943, 2004944, 2004982, 2004982, 2005024, 2004826, 2004955, 2004997,
    #             2005041, 2004869, 2005069, 2004998, 2004880, 2004881, 2005142, 2004925, 2005057, 2004828,
    #             2004827, 2004989, 2004889, 2005081, 2005080]  # Replace or extend as needed

    #close appeals
   

    tab_configs = {
        "document": load_tab_config("מסמכים"),
        "decision": load_tab_config("החלטות"),
        "discussion": load_tab_config("דיונים"),
        "request_log": load_tab_config("יומן תיק"),
        "representator_log": load_tab_config("מעורבים בתיק"),
        "case_contact": load_tab_config("עורר פרטי קשר"),
        "distribution": load_tab_config("הפצות")
    }

    dashboard_results = {}

    with ThreadPoolExecutor(max_workers=6) as executor:
        futures = [executor.submit(process_case, case_id, tab_configs) for case_id in case_ids]
        for future in as_completed(futures):
            case_id, case_results = future.result()
            if case_results:
                dashboard_results[str(case_id)] = case_results

    with open("comparison_summary.json", "w", encoding="utf-8") as f:
        #json.dump(dashboard_results, f, indent=2, ensure_ascii=False)
        import pandas as pd
        def convert_timestamps(obj):
            if isinstance(obj, pd.Timestamp):
                return obj.isoformat()
            raise TypeError(f"Object of type {obj.__class__.__name__} is not JSON serializable")

        json.dump(dashboard_results, f, indent=2, ensure_ascii=False, default=convert_timestamps)

    log_and_print("✅ All comparisons completed. Use streamlit run dashboard_app.py to view results.", "success")
    create_excel_summary_from_json()


if __name__ == "__main__":
    main()


